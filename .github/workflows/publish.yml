name: "Build & Publish App, Service, Scripts"
on:
  push:
    branches:
      - master
      - pr_in

permissions: write-all

jobs:
  create-release:
    name: Create a new github release

    permissions:
      contents: write

    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.get-u-url.outputs.result }}
      release_id: ${{ steps.get-id.outputs.result }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Create Release
        id: create-release
        uses: actions/github-script@v6
        env:
          BRANCH: ${{ github.ref_name }}
        with:
          script: |
            const fs = require("fs");
            const version = require('./package.json').version;

            const alpha = process.env.BRANCH != "master";
            const alphaId = Date.now();

            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: !alpha ? version : `alpha-${alphaId}`,
              name: alpha ? `AHQ Store Alpha v${version}-next-${alphaId}` : `AHQ Store v${version}`,
              body: String(fs.readFileSync("./latest.md")),
              draft: true,
              prerelease: alpha
            });
            return data

      - name: Get Release Id
        id: get-id
        uses: actions/github-script@v6
        env:
          data: ${{ steps.create-release.outputs.result }}
        with:
          result-encoding: string
          script: |
            let data = process.env.data;

            try {
              data = JSON.parse(data);

              console.log(data.id);

              return data.id;
            } catch (_) {
              console.log(data.id);
              return data.id;
            }

      - name: Get Upload Url
        id: get-u-url
        uses: actions/github-script@v6
        env:
          data: ${{ steps.create-release.outputs.result }}
        with:
          result-encoding: string
          script: |
            let data = process.env.data;

            try {
              data = JSON.parse(data);

              return data.upload_url;
            } catch (_) {
              return data.upload_url;
            }


  publish-cargo:
    name: Publish ahqstore-types to cargo

    runs-on: ubuntu-latest

    continue-on-error: true

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish types to cargo
        run: cargo publish
        working-directory: ahqstore-types
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}
        continue-on-error: true

  make-setup:
    needs: create-release
    name: Make Setup (exe)

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
    
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust
        if: ${{ github.event_name }} == "push" && ${{ github.ref_name }} == "master"
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: src-setup-${{ runner.os }}
          cache-all-crates: true
          workspaces: "src-setup -> target"

      - name: Build Setup
        run: cargo build --release
        working-directory: src-setup

      - name: Upload Windows Setup
        if: matrix.os == 'windows-latest'
        uses: ahqstore/upload-release-assets@v59
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-setup/target/release/ahqstore_setup_amd64.exe
          asset_name: ahqstore_setup_win32_amd64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Linux Setup
        if: matrix.os != 'windows-latest'
        uses: ahqstore/upload-release-assets@v59
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-setup/target/release/ahqstore_setup_amd64
          asset_name: ahqstore_setup_amd64_linux
          asset_content_type: application/octet-stream

  publish-tauri:
    needs: create-release
    name: Build & Publish Tauri App & Service

    strategy:
      fail-fast: true
      matrix:
        platform: [windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache vcpkg
        id: cache
        uses: actions/cache@v3
        with:
          path: vcpkg
          key: vcpkg-${{ runner.os }}-${{ runner.arch }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: install Vite dependencies and Build React App
        run: pnpm install; pnpm build
        env:
          CI: "false"

      - name: Decrypt Key / Load Encryption Key
        run: node encryptor.cjs
        env:
          KEY: ${{ secrets.SSL_ENCRYPT_DATA }}

      - name: Cache Rust
        if: ${{ github.event_name }} == "push" && ${{ github.ref_name }} == "master"
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: src-tauriapp-${{ runner.os }}
          cache-all-crates: true
          workspaces: |
            src-service -> target
            src-tauri -> target

      - name: Build Service
        run: cargo build --release
        working-directory: src-service
        if: matrix.platform == 'windows-latest'

      - name: Upload Executable (standalone)
        uses: actions/upload-artifact@v3
        if: matrix.platform == 'windows-latest'
        with:
          name: service.exe
          path: ./src-service/target/release/ahqstore_service.exe

      - name: Upload Release Asset
        id: upload-release-asset
        if: matrix.platform == 'windows-latest'
        uses: ahqstore/upload-release-assets@v59
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-service/target/release/ahqstore_service.exe
          asset_name: ahqstore_service.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Load VCPKG Page (Windows)
        if: ${{ !steps.cache.outputs.cache-hit }} && matrix.platform == 'windows-latest'
        continue-on-error: true
        run: git clone https://github.com/Microsoft/vcpkg.git

      - name: Install OpenSSL with vcpkg (Windows)
        if: matrix.platform == 'windows-latest'
        continue-on-error: true
        run: |
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg install openssl --triplet x64-windows-static-md
          .\vcpkg integrate install

      - name: Build Tauri App
        id: tauri-app
        uses: tauri-apps/tauri-action@dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI }}
          TAURI_KEY_PASSWORD: ${{ secrets.KEYPASS }}
        with:
          args: --verbose
          releaseId: ${{ needs.create-release.outputs.release_id }}
          includeRelease: true
          includeUpdaterJson: false

  undraft-release:
    needs: [create-release, publish-tauri, make-setup]
    name: Publish Release
    runs-on: ubuntu-latest

    steps:
      - name: Undraft Release
        uses: actions/github-script@v6
        env:
          BRANCH: ${{ github.ref_name }}
          R_ID: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: "ahqsoftwares",
              repo: "tauri-ahq-store",
              release_id: process.env.R_ID,
              draft: false
            });