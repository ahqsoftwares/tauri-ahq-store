name: "Build & Publish App, Service, Scripts"
on:
  push:
    branches:
      - master
      - pr_in

permissions: write-all

jobs:
  create-release:
    name: Create a new github release

    permissions:
      contents: write

    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.get-u-url.outputs.result }}
      release_id: ${{ steps.get-id.outputs.result }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        env:
          BRANCH: ${{ github.ref_name }}
        with:
          script: |
            const fs = require("fs");
            const version = require('./package.json').version;

            const alpha = process.env.BRANCH != "master";
            const alphaId = Date.now();

            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: !alpha ? version : `alpha-${alphaId}`,
              name: alpha ? `AHQ Store Alpha v${version}-next-${alphaId}` : `AHQ Store v${version}`,
              body: String(fs.readFileSync("./latest.md")),
              draft: true,
              prerelease: alpha
            });
            return data

      - name: Get Release Id
        id: get-id
        uses: actions/github-script@v7
        env:
          data: ${{ steps.create-release.outputs.result }}
        with:
          result-encoding: string
          script: |
            let data = process.env.data;

            try {
              data = JSON.parse(data);

              console.log(data.id);

              return data.id;
            } catch (_) {
              console.log(data.id);
              return data.id;
            }

      - name: Get Upload Url
        id: get-u-url
        uses: actions/github-script@v7
        env:
          data: ${{ steps.create-release.outputs.result }}
        with:
          result-encoding: string
          script: |
            let data = process.env.data;

            try {
              data = JSON.parse(data);

              return data.upload_url;
            } catch (_) {
              return data.upload_url;
            }


  publish-cargo:
    name: Publish ahqstore-types to cargo

    runs-on: ubuntu-latest

    continue-on-error: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly

      - name: Publish types to cargo
        run: cargo publish
        working-directory: src-ahqstore-types
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}
        continue-on-error: true

  make-setup:
    needs: create-release
    name: Make Setup Executable (x86_64)

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
    
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly

      - name: Build Setup
        run: cargo build --release
        working-directory: src-setup

      - name: Upload Windows Setup
        if: matrix.os == 'windows-latest'
        uses: ahqstore/upload-release-assets@v60
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-setup/target/release/ahqstore_setup_amd64.exe
          asset_name: ahqstore_setup_win32_amd64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Linux Setup
        if: matrix.os != 'windows-latest'
        uses: ahqstore/upload-release-assets@v60
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-setup/target/release/ahqstore_setup_amd64
          asset_name: ahqstore_setup_amd64_linux
          asset_content_type: application/octet-stream

  make-arm-setup:
    needs: create-release
    name: Make Setup Executable (arm64)
        
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: aarch64-pc-windows-msvc

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
      
    runs-on: ${{ matrix.os }}
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          toolchain: nightly
        
      - name: Build Setup
        run: cargo build --release --target ${{ matrix.target }}
        working-directory: src-setup
        
      - name: Upload Windows Setup
        if: matrix.os == 'windows-latest'
        uses: ahqstore/upload-release-assets@v60
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-setup/target/${{ matrix.target }}/release/ahqstore_setup_amd64.exe
          asset_name: ahqstore_setup_win32_arm64.exe
          asset_content_type: application/vnd.microsoft.portable-executable
        
      - name: Upload Linux Setup
        if: matrix.os != 'windows-latest'
        uses: ahqstore/upload-release-assets@v60
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-setup/target/${{ matrix.target }}/release/ahqstore_setup_amd64
          asset_name: ahqstore_setup_arm64_linux
          asset_content_type: application/octet-stream

  publish-tauri:
    needs: create-release
    name: Build & Publish Tauri App & Service (x86_64)

    strategy:
      fail-fast: true
      matrix:
        platform: [windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache vcpkg
        id: cache
        uses: actions/cache@v4
        with:
          path: vcpkg
          key: vcpkg-${{ runner.os }}-${{ runner.arch }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.1-dev build-essential curl wget file libssl-dev libayatana-appindicator3-dev librsvg2-dev

      - name: install Vite dependencies and Build React App
        run: pnpm install; pnpm build
        env:
          CI: "false"

      - name: Decrypt Key / Load Encryption Key
        run: node encryptor.cjs
        env:
          KEY: ${{ secrets.SSL_ENCRYPT_DATA }}

      - name: Build Service
        run: cargo build --release
        working-directory: src-service

      - name: Upload Service (Windows)
        if: matrix.platform == 'windows-latest'
        uses: ahqstore/upload-release-assets@v60
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-service/target/release/ahqstore_service.exe
          asset_name: ahqstore_service.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      
      - name: Upload Service (Linux)
        if: matrix.platform == 'ubuntu-latest'
        uses: ahqstore/upload-release-assets@v60
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-service/target/release/ahqstore_service
          asset_name: ahqstore_service
          asset_content_type: application/octet-stream

      - name: Build Tauri App
        id: tauri-app
        uses: tauri-apps/tauri-action@dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI }}
          TAURI_KEY_PASSWORD: ${{ secrets.KEYPASS }}
        with:
          args: --verbose
          releaseId: ${{ needs.create-release.outputs.release_id }}
          includeRelease: true
          includeUpdaterJson: false

  publish-arm-tauri:
    needs: create-release
    name: Build & Publish Tauri App & Service (arm64)

    strategy:
      fail-fast: true
      matrix:
        include:
          - platform: windows-latest
            target: aarch64-pc-windows-msvc
          
          - platform: ubuntu-latest
            target: aarch64-unknown-linux-gnu

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache vcpkg
        id: cache
        uses: actions/cache@v4
        with:
          path: vcpkg
          key: vcpkg-${{ runner.os }}-arm

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          toolchain: nightly

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt-get install libwebkit2gtk-4.1-dev:arm64 build-essential:arm64 curl:arm64 wget:arm64 file:arm64 libssl-dev:arm64 libayatana-appindicator3-dev:arm64 librsvg2-dev:arm64

      - name: install Vite dependencies and Build React App
        run: pnpm install; pnpm build
        env:
          CI: "false"

      - name: Decrypt Key / Load Encryption Key
        run: node encryptor.cjs
        env:
          KEY: ${{ secrets.SSL_ENCRYPT_DATA }}

      - name: Build Service
        run: cargo build --release --target ${{ matrix.target }}
        working-directory: src-service

      - name: Upload Service (Windows)
        if: matrix.platform == 'windows-latest'
        uses: ahqstore/upload-release-assets@v60
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-service/target/${{ matrix.target }}/release/ahqstore_service.exe
          asset_name: ahqstore_service.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      
      - name: Upload Service (Linux)
        if: matrix.platform == 'ubuntu-latest'
        uses: ahqstore/upload-release-assets@v60
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-service/target/${{ matrix.target }}/release/ahqstore_service
          asset_name: ahqstore_service
          asset_content_type: application/octet-stream

      - name: Build Tauri App
        id: tauri-app
        uses: tauri-apps/tauri-action@dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI }}
          TAURI_KEY_PASSWORD: ${{ secrets.KEYPASS }}
        with:
          args: --verbose --target ${{ matrix.target }}
          releaseId: ${{ needs.create-release.outputs.release_id }}
          includeRelease: true
          includeUpdaterJson: false

  undraft-release:
    needs: [create-release, publish-tauri, make-setup, make-arm-setup, publish-arm-tauri]
    name: Publish Release
    runs-on: ubuntu-latest

    steps:
      - name: Undraft Release
        uses: actions/github-script@v7
        env:
          BRANCH: ${{ github.ref_name }}
          R_ID: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: "ahqsoftwares",
              repo: "tauri-ahq-store",
              release_id: process.env.R_ID,
              draft: false
            });
